// stylelint-disable selector-no-qualifying-type

//
// Textual form controls
//

.form-control {
	display: block;
	width: 100%;
	height: 30px;
	padding: $input-padding-y $input-padding-x;
	font-family: $input-font-family;
	@include font-size($input-font-size);
	font-weight: $input-font-weight;
	line-height: $input-line-height;
	color: $input-color;
	background-color: $input-bg;
	background-clip: padding-box;
	border: $input-border-width solid transparent;
	border-bottom-color: $input-border-color;

	// Note: This has no effect on <select>s in some browsers, due to the limited stylability of `<select>`s in CSS.
	// @include border-radius($input-border-radius, 0);

	// @include box-shadow($input-box-shadow);
	@include transition($input-transition);

	// Unstyle the caret on `<select>`s in IE10+.
	&::-ms-expand {
		background-color: transparent;
		border: 0;
	}

	// Customize the `:focus` state to imitate native WebKit styles.
	@include form-control-focus();
	&:focus {
		border-color: transparent;
		border-bottom-color: $info;
		box-shadow: none;
	}

	// Placeholder
	&::placeholder {
		color: $input-placeholder-color;
		// Override Firefox's unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526.
		opacity: 1;
	}

	// Disabled and read-only inputs
	//
	// HTML5 says that controls under a fieldset > legend:first-child won't be
	// disabled if the fieldset is disabled. Due to implementation difficulty, we
	// don't honor that edge case; we style them as disabled anyway.
	&:disabled,
	&[readonly] {
		background-color: $input-disabled-bg;
		// iOS fix for unreadable disabled content; see https://github.com/twbs/bootstrap/issues/11655.
		opacity: 1;
	}

	@include media-breakpoint-up(xl) {
		@include font-size(1.125rem);
	}
}

select.form-control {
	&:focus::-ms-value {
		// Suppress the nested default white text on blue background highlight given to
		// the selected option text when the (still closed) <select> receives focus
		// in IE and (under certain conditions) Edge, as it looks bad and cannot be made to
		// match the appearance of the native widget.
		// See https://github.com/twbs/bootstrap/issues/19398.
		color: $input-color;
		background-color: $input-bg;
	}
}

// Make file inputs better match text inputs by forcing them to new lines.
.form-control-file,
.form-control-range {
	display: block;
	width: 100%;
}


//
// Labels
//

// For use with horizontal and inline forms, when you need the label (or legend)
// text to align with the form controls.
.col-form-label {
	padding-top: calc(#{$input-padding-y} + #{$input-border-width});
	padding-bottom: calc(#{$input-padding-y} + #{$input-border-width});
	margin-bottom: 0; // Override the `<label>/<legend>` default
	@include font-size(inherit); // Override the `<legend>` default
	line-height: $input-line-height;
}

.col-form-label-lg {
	padding-top: calc(#{$input-padding-y-lg} + #{$input-border-width});
	padding-bottom: calc(#{$input-padding-y-lg} + #{$input-border-width});
	@include font-size($input-font-size-lg);
	line-height: $input-line-height-lg;
}

.col-form-label-sm {
	padding-top: calc(#{$input-padding-y-sm} + #{$input-border-width});
	padding-bottom: calc(#{$input-padding-y-sm} + #{$input-border-width});
	@include font-size($input-font-size-sm);
	line-height: $input-line-height-sm;
}


// Readonly controls as plain text
//
// Apply class to a readonly input to make it appear like regular plain
// text (without any border, background color, focus indicator)

.form-control-plaintext {
	display: block;
	width: 100%;
	padding-top: $input-padding-y;
	padding-bottom: $input-padding-y;
	margin-bottom: 0; // match inputs if this class comes on inputs with default margins
	line-height: $input-line-height;
	color: $input-plaintext-color;
	background-color: transparent;
	border: solid transparent;
	border-width: $input-border-width 0;

	&.form-control-sm,
	&.form-control-lg {
		padding-right: 0;
		padding-left: 0;
	}
}


// stylelint-disable-next-line no-duplicate-selectors
select.form-control {

	&[size],
	&[multiple] {
		height: auto;
	}
}

textarea.form-control {
	height: 30px;
	min-height: 30px;
	resize: none;
	overflow: hidden;
}

// Form groups
//
// Designed to help with the organization and spacing of vertical forms. For
// horizontal forms, use the predefined grid classes.

.form-group {
	margin-bottom: $form-group-margin-bottom;

	@include media-breakpoint-up(xl) {
		margin-bottom: 1.25rem;
	}
}

.form-text {
	display: block;
	margin-top: $form-text-margin-top;
}


// Form grid
//
// Special replacement for our grid system's `.row` for tighter form layouts.

.form-row {
	display: flex;
	flex-wrap: wrap;
	margin-right: -$form-grid-gutter-width / 2;
	margin-left: -$form-grid-gutter-width / 2;

	>.col,
	>[class*="col-"] {
		padding-right: $form-grid-gutter-width / 2;
		padding-left: $form-grid-gutter-width / 2;
	}
}


// Checkboxes and radios
//
// Indent the labels to position radios/checkboxes as hanging controls.

.form-check {
	position: relative;
	display: block;
	padding-left: $form-check-input-gutter;
}

.form-check-input {
	position: absolute;
	margin-top: $form-check-input-margin-y;
	margin-left: -$form-check-input-gutter;

	&:disabled~.form-check-label {
		color: $text-muted;
	}
}

.form-check-label {
	margin-bottom: 0; // Override default `<label>` bottom margin
}

.form-check-inline {
	display: inline-flex;
	align-items: center;
	padding-left: 0; // Override base .form-check
	margin-right: $form-check-inline-margin-x;

	// Undo .form-check-input defaults and add some `margin-right`.
	.form-check-input {
		position: static;
		margin-top: 0;
		margin-right: $form-check-inline-input-margin-x;
		margin-left: 0;
	}
}

.form {

	&-primary {
		background-color: $white;
		box-shadow: 4px 4px 16px rgba($black, 0.08);
		border-radius: 5px;
		padding: 1.5rem;
		position: relative;
		z-index: 1;

		@include media-breakpoint-up(xl) {
			padding: 2rem;
		}

		@include media-breakpoint-up(xl) {
			padding: 2.5rem 3rem;
		}
	}

	&-offset {
		@include media-breakpoint-up(lg) {
			margin-right: -14%;
		}
	}

	&-header {
		h2 {
			color: $primary;
			@include font-size(2.375rem);
		}
	}
}

.radio-element,
.checkbox-element {
	position: relative;

	.radio-element-label,
	.checkbox-element-label {
		display: block;
		position: relative;
		z-index: 1;
		padding-left: 2.0625rem;
		margin: 0 1rem 0.75rem 0;
		cursor: pointer;
		color: $black;
		@include font-size($font-size-base);
		font-weight: 700;

		@include media-breakpoint-up(xl) {
			@include font-size(1.125rem);
		}

		&:before,
		&:after {
			position: absolute;
			content: '';
			height: 18px;
			width: 18px;
			border: 1px solid $cyan;
			left: 0;
			top: 50%;
			transform: translateY(-50%);
			// border-radius: 50%;
		}

		&:after {
			height: 12px;
			width: 12px;
			border: none;
			background: $cyan;
			left: 3px;
			opacity: 0;
			transition: .2s ease-in-out;
		}
	}

	input[type=radio],
	input[type=checkbox] {
		position: absolute;
		opacity: 0;
		visibility: hidden;

		&:checked+label {
			&:after {
				opacity: 1;
			}
		}
	}
}


// Form validation
//
.messages {
	display: none;
}

.has-error {
	.form-control {
		border-bottom-color: $form-invalid-border-color;
	}

	.radio-element-label,
	.checkbox-element-label {
		color: $red;

		&:before,
		&:after {
			border-color: $form-invalid-border-color;
		}
	}
}

.thank-you-message {
	text-align: center;
	font-size: $form-success-font-size;
	color: $form-success-font-color;
	line-height: 1.7;

	a {
		color: $primary;
		white-space: nowrap;

		&:hover,
		&:focus {
			color: $form-success-font-color;
			text-decoration: none;
		}
	}
}

.thank-you-heading {
	font-size: $form-success-title-font-size;
}